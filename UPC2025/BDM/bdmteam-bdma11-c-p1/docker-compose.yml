services:
  # API Service
  api:
    build: ./api
    ports:
      - "8000:8000"
    volumes:
      - ./data:/data  # Mount entire data directory
    environment:
      DELTA_LAKE_PATH: /data/delta
      PROCESSED_DATA_PATH: /data/structured
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  spark:
    build: ./spark
    volumes:
      - ./spark:/app
      - ./data:/data # Mount entire data directory
    environment:
      DELTA_LAKE_PATH: /data/delta
      LOG_DATA_PATH: /data/log_data
      PHOTO_DIR: /data/unstructured/profile_photos
    command: ["tail", "-f", "/dev/null"] 
    depends_on:
      - api
  streaming:
    build: ./spark
    #command: ["python", "/app/ingest_data.py", "--mode", "streaming"]
    command: ["tail", "-f", "/dev/null"] 
    volumes:
      - ./data:/data # Mount entire data directory
    environment:
      DELTA_LAKE_PATH: /data/delta
      LOG_DATA_PATH: /data/log_data
    depends_on:
      - api
    restart: unless-stopped  

  # Redis
  redis:
    image: redis:latest
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # PostgreSQL
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  airflow-init:
    image: apache/airflow:2.6.3
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dags:/opt/airflow/dags
    command: >
      bash -c '
      until airflow db check; do sleep 5; done &&
      airflow db init || true &&
      airflow users create \
        --username admin \
        --password admin \
        --firstname Admin \
        --lastname User \
        --role Admin \
        --email admin@example.com || true &&
      airflow connections add \
        --conn-id api_connection \
        --conn-type http \
        --conn-host api \
        --conn-port 8000 || true
      '
    depends_on:
      - postgres

  # Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.6.3
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__PARALLELISM: "8"
      AIRFLOW__CORE__DAG_CONCURRENCY: "4"
      DOCKER_HOST: unix:///var/run/docker.sock
    command: > 
      bash -c '
      apt-get update && apt-get install -y mailutils &&
      airflow webserver
      '
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - ./data:/data
    ports:
      - "8080:8080"
    user: "0:0"
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  # Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.6.3
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__SCHEDULER__SCHEDULER_HEARTBEAT_SEC: "5"
      DOCKER_HOST: unix:///var/run/docker.sock
    command: >
      bash -c '
      apt-get update && 
      apt-get install -y mailutils &&
      airflow scheduler
      '
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - ./data:/data
    user: "0:0"
    depends_on:
      airflow-init:
        condition: service_completed_successfully

volumes:
  postgres_data:
  airflow_logs:
  data:  # Persistent named volume for all data
    driver: local
    driver_opts:
      type: none
      device: ./data  # Relative path (override in production)
      o: bind